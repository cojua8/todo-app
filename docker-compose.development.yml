services:
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 7000:3000
    restart: unless-stopped
    volumes:
      - ./instrumentation/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./instrumentation/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./instrumentation/grafana/grafana.ini:/etc/grafana/grafana.ini

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - --web.enable-remote-write-receiver
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./instrumentation/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  todo-app-backend:
    container_name: todo_app_backend
    depends_on:
      - todo_app_postgres
    build:
      context: ./src/backend
      args:
        - FRAMEWORK=fastapi
    ports:
      - 5000:5000
    restart: unless-stopped
    volumes:
      # this binds the host folder to the container folder
      - ./src/backend/app:/app/app
      # the json database will be stored in /database/json_database,
      # in the data volume
      - data:/database/json_database
    environment:
      # in the container, saves the database in this path
      # - DATABASE=json
      # - DATABASE_PATH=/database/json_database
      - DATABASE=postgresql
      - DB_DIALECT=postgresql
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=todo_app_postgres
      - DB_PORT=5432
      - DB_NAME=todo_db
      - OTEL_SERVICE_NAME=todo_app_backend
      - OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true
      - OTEL_TRACES_EXPORTER=otlp,console
      - OTEL_METRICS_EXPORTER=console,otlp
      - OTEL_LOGS_EXPORTER=console
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=alloy:4317
      - OTEL_EXPORTER_OTLP_TRACES_INSECURE=true
      - OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=alloy:4317
      - OTEL_EXPORTER_OTLP_METRICS_INSECURE=true
      - GRPC_VERBOSITY=debug
      - GRPC_TRACE=http,call_error,connectivity_state

  todo-app-frontend:
    container_name: todo_app_frontend
    build:
      context: ./src/frontend
    ports:
      - 3000:3000
    restart: unless-stopped
    volumes:
      - ./src/frontend/:/app/frontend/
      # avoid copying the node_modules folder from local to the container
      - /app/frontend/node_modules/
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true # allows hot reload on windows

  todo_app_postgres:
    container_name: todo_app_postgres_db
    image: postgres:15.1-alpine
    restart: unless-stopped
    volumes:
      - postgres_db:/database/postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=todo_db

  postgres_metrics:
    container_name: todo_app_postgres_metrics
    image: quay.io/prometheuscommunity/postgres-exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:postgres@todo_app_postgres:5432/todo_db?sslmode=disable
    ports:
      - 9187:9187

  node-exporter:
    image: prom/node-exporter:latest
    container_name: todo-app-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"

  tempo-init:
    image: grafana/tempo:latest
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - ./instrumentation/tempo/tempo-data:/var/tempo

  tempo:
    image: grafana/tempo:latest
    container_name: todo-app-tempo
    command:
      - "run"
      - "--config.file=/etc/tempo.yaml"
    volumes:
      - ./instrumentation/tempo/tempo.yaml:/etc/tempo.yaml
      - ./instrumentation/tempo/tempo-data:/var/tempo
    depends_on:
      - tempo-init

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ./instrumentation/alloy/config.alloy:/etc/alloy/config.alloy
    command:
      - run
      - /etc/alloy/config.alloy
      - --server.http.listen-addr=0.0.0.0:12345
      - --storage.path=/var/lib/alloy/data
    ports:
      - 12345:12345
      - 4317:4317
      - 4318:4318
      # - 8889:8889

      # the path of data won't be erased on rebuild
volumes:
  data:
  postgres_db:
    driver: local
