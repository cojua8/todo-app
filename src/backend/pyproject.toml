[tool.poetry]
name = "todo-app-backend"
version = "0.1.0"
description = ""
authors = ["Joaqu√≠n Neira <joaquin.neiraj@gmail.com>"]
packages = []
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
aiopath = "0.6.11"
dependency-injector = "4.41.0"
sqlalchemy = { extras = ["asyncio"], version = "2.0.30" }
uvicorn = { extras = ["standard"], version = "0.29.0" }
asyncpg = "0.29.0"
pydantic = {extras = ["email"], version = "2.7.0"}
prometheus-client = "0.20.0"
pydantic-settings = "2.2.0"


[tool.poetry.group.test.dependencies]
factory-boy = "3.3.0"
pytest = "8.2.1"
pytest-asyncio = "0.23.7"
pytest-factoryboy = "2.7.0"
freezegun = "1.5.1"
pytest-mock = "3.14.0"


[tool.poetry.group.dev.dependencies]
black = "24.4.2"
ruff = "0.4.4"
pyright="1.1.364"


[tool.poetry.group.fastapi]
optional = true

[tool.poetry.group.fastapi.dependencies]
fastapi = "0.111.0"
prometheus-fastapi-instrumentator = "7.0.0"


[tool.poetry.group.flask]
optional = true

[tool.poetry.group.flask.dependencies]
flask = { extras = ["async"], version = "3.0.3"}
prometheus-flask-exporter = "0.23.0"
asgiref = "3.8.1"
flask-cors = "4.0.1"
flask-openapi3 = "3.1.1"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Formatting
[tool.black]
line-length = 79
skip-magic-trailing-comma = true

# Testing
[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"

# typing
[tool.pyright]
pythonversion = "3.11"

[tool.ruff]
line-length = 79
show-fixes = true
output-format = "full"
target-version = "py311"

[tool.ruff.lint]
select = ["ALL"]
unfixable = ["ERA001"]
ignore = [
    "ANN003", #Missing type annotation for `**kwargs` 
    "ANN101", #Missing type annotation for `self` in method
    "ANN102", #Missing type annotation for `cls` in classmethod
    "ANN204", #Missing return type annotation for special method `__init__`
    "BLE001", #Do not catch blind exception: `Exception`
    "COM812", #Trailing comma missing
    "D100",   #Missing docstring in public module
    "D101",   #Missing docstring in public class
    "D102",   #Missing docstring in public method
    "D103",   #Missing docstring in public function
    "D104",   #Missing docstring in public package
    "D105",   #Missing docstring in magic method
    "D106",   #Missing docstring in public nested class
    "D107",   #Missing docstring in `__init__`
    "D203",   #1 blank line required before class docstring
    "D204",   #1 blank line required after class docstring
    "D212",   #Multi-line docstring summary should start at the first line
    "RET503", #Missing explicit `return` at the end of function able to return non-`None` value
]

[tool.ruff.lint.flake8-import-conventions]
[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"datetime" = "dt"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["app", "tests"]

[tool.ruff.lint.mccabe]
max-complexity = 5

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends"]
